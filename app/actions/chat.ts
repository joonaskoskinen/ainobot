"use server"

import { generateText } from "ai"
import { createGroq } from "@ai-sdk/groq"

export interface ChatMessage {
  role: "user" | "assistant"
  content: string
}

// Demo-vastaukset jos API-avain puuttuu
const demoResponses = {
  ecommerce: [
    "Hei! üëã Kiitos yhteydenotostasi **TechMart Oy:hyn**. Voin auttaa sinua tuotetietojen, tilausten ja palautusten kanssa.\n\n## Miten voin auttaa?\n‚Ä¢ Tuotetiedot ja saatavuus\n‚Ä¢ Tilausten seuranta\n‚Ä¢ Palautukset ja reklamaatiot\n‚Ä¢ Tekninen tuki",

    "**iPhone 15 Pro** on varastossa! üì±\n\n## Saatavilla olevat mallit:\n‚Ä¢ 128GB - **1299‚Ç¨**\n‚Ä¢ 256GB - **1449‚Ç¨**\n‚Ä¢ 512GB - **1699‚Ç¨**\n\n*Toimitusaika: 1-2 arkip√§iv√§√§*\n\nHaluatko lis√§tietoja jostain mallista?",

    "## Palautusohjeet üì¶\n\nVoit palauttaa tuotteen **30 p√§iv√§n** kuluessa ostosta:\n\n‚Ä¢ Palauta tuote alkuper√§ispakkauksessa\n‚Ä¢ Liit√§ mukaan **ostokuitti**\n‚Ä¢ Ilmoita palautus syyst√§\n‚Ä¢ Toimitamme palautustarran s√§hk√∂postitse\n\n*Palautuksen k√§sittelyaika: 3-5 arkip√§iv√§√§*",
  ],

  restaurant: [
    "Tervetuloa **Ravintola Kulmaan**! üçΩÔ∏è\n\n## Voin auttaa sinua:\n‚Ä¢ P√∂yt√§varaukset\n‚Ä¢ Menu ja ruokalistat\n‚Ä¢ Erikoisruokavaliot\n‚Ä¢ Aukioloajat ja yhteystiedot\n\nMiten voin palvella?",

    "## P√∂yt√§varaus kahdelle ‚ú®\n\nVoin varata teille p√∂yd√§n! Milloin haluaisitte tulla?\n\n**Vapaat ajat t√§n√§√§n:**\n‚Ä¢ 18:00 - 20:00\n‚Ä¢ 20:30 - 22:00\n\n*Varaus onnistuu my√∂s puhelimitse: 09-123 4567*",

    "## Vegaaniset vaihtoehdot üå±\n\nMeill√§ on erinomainen valikoima vegaanisia ruokia:\n\n‚Ä¢ **Vegaaninen risotto** - 18‚Ç¨\n‚Ä¢ **Kasvispihvi perunoilla** - 16‚Ç¨\n‚Ä¢ **Vegaaninen pasta** - 15‚Ç¨\n\n*Kaikki kastikkeet ja lisukkeet ovat my√∂s vegaanisia!*",
  ],

  healthcare: [
    "Tervetuloa **TerveysKeskus Plus:aan**! üè•\n\n## Voin auttaa:\n‚Ä¢ Ajanvaraukset\n‚Ä¢ Palvelumme\n‚Ä¢ Aukioloajat\n‚Ä¢ Yhteystiedot\n\n**KIIREELLISISS√Ñ TAPAUKSISSA SOITA 112!**",

    "## Ajanvaraus l√§√§k√§rille üë©‚Äç‚öïÔ∏è\n\n**Vapaat ajat t√§ll√§ viikolla:**\n‚Ä¢ Tiistai 14:30\n‚Ä¢ Keskiviikko 10:15\n‚Ä¢ Perjantai 16:00\n\n*Varaa aika: 010-123 4567*\n\nMik√§ aika sopisi sinulle parhaiten?",
  ],

  realestate: [
    "Tervetuloa **Kiinteist√∂ Koti Oy:hyn**! üè†\n\n## Voin auttaa:\n‚Ä¢ Asuntojen haku\n‚Ä¢ N√§ytt√∂jen varaaminen\n‚Ä¢ Hintatiedot\n‚Ä¢ Laina-asiat\n\nMit√§ asuntoa etsit?",

    "## 3h+k asunnot Helsingiss√§ üèôÔ∏è\n\n**Saatavilla olevia kohteita:**\n‚Ä¢ Punavuori, 75m¬≤ - **450 000‚Ç¨**\n‚Ä¢ Kallio, 68m¬≤ - **380 000‚Ç¨**\n‚Ä¢ T√∂√∂l√∂, 82m¬≤ - **520 000‚Ç¨**\n\n*Voin varata n√§yt√∂n mihin tahansa kohteeseen!*",
  ],

  banking: [
    "Tervetuloa **Koti Pankkiin**! üè¶\n\n## Voin auttaa:\n‚Ä¢ Tilit ja kortit\n‚Ä¢ Lainat ja asuntolainat\n‚Ä¢ Sijoitukset\n‚Ä¢ Maksuliikenteen ongelmat\n\n**Muista: emme koskaan kysy tunnuksiasi puhelimitse!**",

    "## Asuntolainan hakeminen üè†\n\n**Tarvittavat tiedot:**\n‚Ä¢ Tulotiedot (palkkatodistus)\n‚Ä¢ Varallisuustiedot\n‚Ä¢ Kohteen tiedot\n‚Ä¢ Henkil√∂llisyystodistus\n\n*Lainap√§√§t√∂s yleens√§ 1-3 arkip√§iv√§ss√§*\n\nHaluatko varata ajan lainaneuvotteluun?",
  ],
}

export async function generateAIResponse(messages: ChatMessage[], scenario = "ecommerce"): Promise<string> {
  // Tarkista kaikki mahdolliset ymp√§rist√∂muuttujat
  const apiKey =
    process.env.NEXT_PUBLIC_API_KEY ||
    process.env.GROQ_API_KEY ||
    process.env.API_KEY ||
    process.env.NEXT_PUBLIC_GROQ_API_KEY

  console.log("üîç Environment check:")
  console.log("- NEXT_PUBLIC_API_KEY:", process.env.NEXT_PUBLIC_API_KEY ? "‚úÖ Found" : "‚ùå Missing")
  console.log("- GROQ_API_KEY:", process.env.GROQ_API_KEY ? "‚úÖ Found" : "‚ùå Missing")
  console.log("- API_KEY:", process.env.API_KEY ? "‚úÖ Found" : "‚ùå Missing")
  console.log("- NEXT_PUBLIC_GROQ_API_KEY:", process.env.NEXT_PUBLIC_GROQ_API_KEY ? "‚úÖ Found" : "‚ùå Missing")
  console.log(
    "- Final API key:",
    apiKey ? `‚úÖ Using key starting with: ${apiKey.substring(0, 10)}...` : "‚ùå No key found",
  )

  // Jos API-avain puuttuu, k√§yt√§ demo-vastauksia
  if (!apiKey || apiKey.length < 10) {
    console.log("üé≠ Demo mode - using predefined responses")

    const responses = demoResponses[scenario as keyof typeof demoResponses] || demoResponses.ecommerce
    const randomResponse = responses[Math.floor(Math.random() * responses.length)]

    // Simuloi latausaikaa
    await new Promise((resolve) => setTimeout(resolve, 1000 + Math.random() * 2000))

    return randomResponse + "\n\n*‚ö†Ô∏è Demo-mode: Lis√§√§ GROQ_API_KEY .env.local tiedostoon oikeaa AI:ta varten*"
  }

  try {
    console.log("ü§ñ Attempting to use real AI with Groq")

    // Initialize Groq with the API key
    const groq = createGroq({
      apiKey: apiKey,
    })

    const context = contexts[scenario as keyof typeof contexts] || contexts.ecommerce

    const { text } = await generateText({
      model: groq("llama-3.3-70b-versatile"),
      messages: [
        {
          role: "system",
          content: context,
        },
        ...messages,
      ],
      temperature: 0.7,
      maxTokens: 500,
    })

    console.log("‚úÖ AI Response received successfully")
    return text
  } catch (error) {
    console.error("‚ùå AI Response Error:", error)

    // Tarkista virhetyyppi
    if (error instanceof Error) {
      if (error.message.includes("API key")) {
        return "üîë **API-avain virhe!** Tarkista ett√§ GROQ_API_KEY on oikein .env.local tiedostossa."
      }
      if (error.message.includes("model")) {
        return "ü§ñ **Malli-ongelma!** Groq-malli ei ole k√§ytett√§viss√§. Kokeile my√∂hemmin uudelleen."
      }
      if (error.message.includes("rate limit")) {
        return "‚è±Ô∏è **Liikaa pyynt√∂j√§!** Odota hetki ennen seuraavaa viesti√§."
      }
    }

    // Fallback demo-vastauksiin
    const responses = demoResponses[scenario as keyof typeof demoResponses] || demoResponses.ecommerce
    return responses[0] + "\n\n*‚ö†Ô∏è Virhe AI:ssa - k√§yt√∂ss√§ demo-mode*"
  }
}

const contexts = {
  ecommerce: `Olet TechMart Oy:n asiakaspalveluassistentti. Vastaa AINA suomeksi ja lyhyesti.

**K√§yt√§ Markdown-muotoilua:**
- **Lihavointi** t√§rkeille asioille
- ## Otsikot osioille
- ‚Ä¢ Luettelot selkeytt√§m√§√§n

Vastaa yst√§v√§llisesti ja ammattimaisesti.`,

  restaurant: `Olet Ravintola Kulman varausassistentti. Vastaa AINA suomeksi ja lyhyesti.

**K√§yt√§ Markdown-muotoilua:**
- **Lihavointi** ruokien nimille
- ## Otsikot osioille

Vastaa l√§mminhenkisesti.`,

  realestate: `Olet Kiinteist√∂ Koti Oy:n assistentti. Vastaa AINA suomeksi ja lyhyesti.

**K√§yt√§ Markdown-muotoilua:**
- **Lihavointi** hinnoille
- ## Otsikot osioille

Vastaa asiantuntevasti.`,

  healthcare: `Olet TerveysKeskus Plus:n assistentti. Vastaa AINA suomeksi ja lyhyesti.

**K√§yt√§ Markdown-muotoilua:**
- **Lihavointi** t√§rkeille tiedoille
- ## Otsikot osioille

T√ÑRKE√Ñ√Ñ: Muistuta aina ett√§ kiireellisiss√§ tapauksissa soitetaan 112.`,

  banking: `Olet Koti Pankin asiakasneuvoja. Vastaa AINA suomeksi ja lyhyesti.

**K√§yt√§ Markdown-muotoilua:**
- **Lihavointi** summille
- ## Otsikot osioille

T√ÑRKE√Ñ√Ñ: Muistuta turvallisuudesta.`,
}
